{
  "sha": "25b941ad7e2bda7c9ac7442d585f839d523e9ed7",
  "url": "https://github.com/MicrosoftDocs/entra-docs/commit/25b941ad7e2bda7c9ac7442d585f839d523e9ed7",
  "author": "learn-build-service-prod[bot]",
  "email": "113403604+learn-build-service-prod[bot]@users.noreply.github.com",
  "date": "2025-09-19T17:12:32Z",
  "message": "Merge pull request #9742 from MicrosoftDocs/main\n\nAuto Publish â€“ main to live - 2025-09-19 17:09 UTC",
  "ai_summary": {
    "Messages": "{\"role\":\"user\",\"content\":\"The following is the commit files that have changed: [\\r\\n  {\\r\\n    \\\"sha\\\": \\\"932f6d163b91ef0d21ccd5d9c0be89c0ecd0755e\\\",\\r\\n    \\\"filename\\\": \\\"docs/global-secure-access/how-to-configure-connectors.md\\\",\\r\\n    \\\"status\\\": \\\"modified\\\",\\r\\n    \\\"additions\\\": 1,\\r\\n    \\\"deletions\\\": 1,\\r\\n    \\\"changes\\\": 2,\\r\\n    \\\"blob_url\\\": \\\"https://github.com/MicrosoftDocs/entra-docs/blob/25b941ad7e2bda7c9ac7442d585f839d523e9ed7/docs%2Fglobal-secure-access%2Fhow-to-configure-connectors.md\\\",\\r\\n    \\\"raw_url\\\": \\\"https://github.com/MicrosoftDocs/entra-docs/raw/25b941ad7e2bda7c9ac7442d585f839d523e9ed7/docs%2Fglobal-secure-access%2Fhow-to-configure-connectors.md\\\",\\r\\n    \\\"contents_url\\\": \\\"https://api.github.com/repos/MicrosoftDocs/entra-docs/contents/docs%2Fglobal-secure-access%2Fhow-to-configure-connectors.md?ref=25b941ad7e2bda7c9ac7442d585f839d523e9ed7\\\",\\r\\n    \\\"patch\\\": \\\"@@ -30,7 +30,7 @@ User identities must be synchronized from an on-premises directory or created di\\\\n The Microsoft Entra private network connector requires a server running Windows Server 2016 or later. You'll install the private network connector on the server. This connector server needs to connect to the Microsoft Entra Private Access service or application proxy service and the private resources or applications that you plan to publish.\\\\n \\\\n * For high availability in your environment, we recommend having more than one Windows server.\\\\n-* The minimum .NET version required for the connector is v4.7.1+.\\\\n+* The minimum .NET version required for the connector is v4.7.2+.\\\\n * For more information, see [private network connectors](../identity/app-proxy/application-proxy-connectors.md#requirements-and-deployment)\\\\n * For more information, see [Determine which .NET framework versions are installed](/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed).\\\\n \\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"sha\\\": \\\"a4940ee68ec8058d892ebbffc65e5b9a34cf79ed\\\",\\r\\n    \\\"filename\\\": \\\"docs/global-secure-access/how-to-use-with-azure-sql-service-endpoint.md\\\",\\r\\n    \\\"status\\\": \\\"modified\\\",\\r\\n    \\\"additions\\\": 1,\\r\\n    \\\"deletions\\\": 1,\\r\\n    \\\"changes\\\": 2,\\r\\n    \\\"blob_url\\\": \\\"https://github.com/MicrosoftDocs/entra-docs/blob/25b941ad7e2bda7c9ac7442d585f839d523e9ed7/docs%2Fglobal-secure-access%2Fhow-to-use-with-azure-sql-service-endpoint.md\\\",\\r\\n    \\\"raw_url\\\": \\\"https://github.com/MicrosoftDocs/entra-docs/raw/25b941ad7e2bda7c9ac7442d585f839d523e9ed7/docs%2Fglobal-secure-access%2Fhow-to-use-with-azure-sql-service-endpoint.md\\\",\\r\\n    \\\"contents_url\\\": \\\"https://api.github.com/repos/MicrosoftDocs/entra-docs/contents/docs%2Fglobal-secure-access%2Fhow-to-use-with-azure-sql-service-endpoint.md?ref=25b941ad7e2bda7c9ac7442d585f839d523e9ed7\\\",\\r\\n    \\\"patch\\\": \\\"@@ -46,7 +46,7 @@ To set the policy to `proxy`:\\\\n 1. Select **Add application segment**:\\\\n     - Destination type: `FQDN` \\\\n     - Fully Qualified Domain Name (FQDN): `<fqdn of the SQL server>`. For example, `contosodbserver1.database.windows.net`.\\\\n-    - Ports: `1443`\\\\n+    - Ports: `1433`\\\\n     - Protocol: `TCP`\\\\n 1. Select **Apply** to add the application segment.\\\\n 1. Select **Save** to save the application.\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"sha\\\": \\\"d27af63086b86f9a5e5aaa83190789db32970313\\\",\\r\\n    \\\"filename\\\": \\\"docs/identity/app-provisioning/use-scim-to-provision-users-and-groups.md\\\",\\r\\n    \\\"status\\\": \\\"modified\\\",\\r\\n    \\\"additions\\\": 24,\\r\\n    \\\"deletions\\\": 39,\\r\\n    \\\"changes\\\": 63,\\r\\n    \\\"blob_url\\\": \\\"https://github.com/MicrosoftDocs/entra-docs/blob/25b941ad7e2bda7c9ac7442d585f839d523e9ed7/docs%2Fidentity%2Fapp-provisioning%2Fuse-scim-to-provision-users-and-groups.md\\\",\\r\\n    \\\"raw_url\\\": \\\"https://github.com/MicrosoftDocs/entra-docs/raw/25b941ad7e2bda7c9ac7442d585f839d523e9ed7/docs%2Fidentity%2Fapp-provisioning%2Fuse-scim-to-provision-users-and-groups.md\\\",\\r\\n    \\\"contents_url\\\": \\\"https://api.github.com/repos/MicrosoftDocs/entra-docs/contents/docs%2Fidentity%2Fapp-provisioning%2Fuse-scim-to-provision-users-and-groups.md?ref=25b941ad7e2bda7c9ac7442d585f839d523e9ed7\\\",\\r\\n    \\\"patch\\\": \\\"@@ -7,7 +7,7 @@ manager: pmwongera\\\\n ms.service: entra-id\\\\n ms.subservice: app-provisioning\\\\n ms.topic: tutorial\\\\n-ms.date: 03/04/2025\\\\n+ms.date: 09/18/2025\\\\n ms.author: jfields\\\\n ms.reviewer: arvinh\\\\n ai-usage: ai-assisted\\\\n@@ -1421,7 +1421,7 @@ Use the checklist to onboard your application quickly and customers have a smoot\\\\n > * Support at least 25 requests per second per tenant to ensure that users and groups are provisioned and deprovisioned without delay (Required)\\\\n > * Establish engineering and support contacts to guide customers post gallery onboarding (Required)\\\\n > * 3 Non-expiring test credentials for your application (Required)\\\\n-> * Support the OAuth authorization code grant or a long lived token as described in the example (Required)\\\\n+> * Support the [OAuth 2.0 client credentials grant](../../identity-platform/v2-oauth2-client-creds-grant-flow.md) (Required)\\\\n > * OIDC apps must have at least 1 role (custom or default) defined\\\\n > * Establish an engineering and support point of contact to support customers post gallery onboarding (Required)\\\\n > * [Support schema discovery (required)](https://tools.ietf.org/html/rfc7643#section-6)\\\\n@@ -1434,57 +1434,42 @@ The SCIM spec doesn't define a SCIM-specific scheme for authentication and autho\\\\n |Authorization method|Pros|Cons|Support|\\\\n |--|--|--|--|\\\\n |Username and password (not recommended or supported by Microsoft Entra ID)|Easy to implement|Insecure - [Your Pa$$word doesn't matter](https://techcommunity.microsoft.com/t5/microsoft-entra-azure-ad-blog/your-pa-word-doesn-t-matter/ba-p/731984)|Not supported for new gallery or non-gallery apps.|\\\\n-|Long-lived bearer token|Long-lived tokens don't require a user to be present. They're easy for admins to use when setting up provisioning.|Long-lived tokens can be hard to share with an admin without using insecure methods such as email. |Supported for gallery and non-gallery apps. |\\\\n-|OAuth authorization code grant|Access tokens have a shorter life than passwords, and have an automated refresh mechanism that long-lived bearer tokens don't have.  A real user must be present during initial authorization, adding a level of accountability. |Requires a user to be present. If the user leaves the organization, the token is invalid, and authorization needs to be completed again.|Supported for gallery apps and non-gallery apps.|\\\\n-|OAuth client credentials grant|Access tokens have a shorter life than passwords, and have an automated refresh mechanism that long-lived bearer tokens don't have. Both the authorization code grant and the client credentials grant create the same type of access token, so moving between these methods is transparent to the API.  Provisioning can be automated, and new tokens can be silently requested without user interaction. ||Supported for gallery apps, but not non-gallery apps. However, you can provide an access token in the UI as the secret token for short term testing purposes. Support for OAuth client credentials grant on non-gallery is in our backlog.|\\\\n+|Long-lived bearer token|Long-lived tokens don't require a user to be present. They're easy for admins to use when setting up provisioning.|Long-lived tokens can be hard to share with an admin without using insecure methods such as email. |Supported for existing apps and non-gallery apps. Not supported for new apps. |\\\\n+| OAuth Authorization code grant|Access tokens have a shorter life than passwords, and have an automated refresh mechanism that long-lived bearer tokens don't have. A real user must be present during initial authorization, adding a level of accountability. |Requires a user to be present. If the user leaves the organization, the token is invalid, and authorization needs to be completed again.| Supported for some existing apps. Not supported for new apps or non-gallery apps.|\\\\n+|OAuth 2.0 client credentials grant|Access tokens have a shorter life than passwords, and have an automated refresh mechanism that long-lived bearer tokens don't have. Both the authorization code grant and the client credentials grant create the same type of access token, so moving between these methods is transparent to the API. Provisioning can be automated, and new tokens can be silently requested without user interaction. Publishers can configure SCIM jobs using client credentials regardless of app type. Each customer must provide their own Client ID and Client Secret to authenticate against the SCIM API. |  | Supported for gallery apps and non-gallery apps.|\\\\n \\\\n > [!NOTE]\\\\n-> It's not recommended to leave the token field blank in the Microsoft Entra provisioning configuration custom app UI. The token generated is primarily available for testing purposes.\\\\n-\\\\n-### OAuth code grant flow\\\\n-\\\\n-The provisioning service supports the [authorization code grant](https://tools.ietf.org/html/rfc6749#page-24) and after submitting your request for publishing your app in the gallery, our team will work with you to collect the following information:\\\\n+> OAuth Authorization code grant will soon be in deprecation. New connectors won't support OAuth Authorization code grant, and existing connectors should now use the OAuth 2.0 client credentials grant. \\\\n \\\\n-- **Authorization URL**, a URL by the client to obtain authorization from the resource owner via user-agent redirection. The user is redirected to this URL to authorize access. \\\\n-\\\\n-- **Token exchange URL**, a URL by the client to exchange an authorization grant for an access token, typically with client authentication.\\\\n+> [!NOTE]\\\\n+> It's not recommended to leave the token field blank in the Microsoft Entra provisioning configuration custom app UI. The token generated is primarily available for testing purposes.\\\\n \\\\n-- **Client ID**, the authorization server issues the registered client a client identifier, which is a unique string representing the registration information provided by the client.  The client identifier isn't a secret; it's exposed to the resource owner and **must not** be used alone for client authentication.  \\\\n+For more authentication and authorization methods, let us know on [UserVoice](https://aka.ms/appprovisioningfeaturerequest).\\\\n \\\\n-- **Client secret**, a secret generated by the authorization server that should be a unique value known only to the authorization server. \\\\n+### OAuth 2.0 client credentials grant flow\\\\n \\\\n-> [!NOTE]\\\\n-> The **Authorization URL** and **Token exchange URL** are currently not configurable per tenant.\\\\n+The provisioning service supports the OAuth 2.0 client credentials grant. After submitting your request for publishing your app in the gallery, our team will work with you to collect the following information:\\\\n \\\\n-> [!NOTE]\\\\n-> OAuth v1 is not supported due to exposure of the client secret. OAuth v2 is supported.  \\\\n+- **Tenant URL:** This is the SCIM API endpoint URL provided by your service provider. For example, it could be something like https://example.test/scim.\\\\n+- **Token Endpoint:** This is the OAuth2 Token URL. It's the endpoint that the provisioning service will use to exchange client credentials for an access token. For example, it could be something like https://example.test/oauth2/token.\\\\n+- **Client Identifier:** This is a unique identifier assigned to your application by the service provider.\\\\n+- **Client Secret:** This is a long-lived token that has the necessary permissions on the API. It's used to authenticate your application when requesting an access token.\\\\n \\\\n-When using the OAuth Code Grant flow, it's required that you support a model where each customer will submit their own client ID and Client Secret when setting up a provisioning instance. A single app wide client ID/Client Secret pair is not supported.\\\\n \\\\n+When using the OAuth 2.0 client credentials grant flow, it's required that you support a model where each customer will submit their own client ID and Client Secret when setting up a provisioning instance. A single app wide client ID/Client Secret pair is not supported.\\\\n \\\\n-#### How to set up OAuth code grant flow\\\\n-1. Sign in to the [Microsoft Entra admin center](https://entra.microsoft.com) as at least an [Application Administrator](~/identity/role-based-access-control/permissions-reference.md#application-administrator).\\\\n-1. Browse to **Entra ID** > **Enterprise apps** > **Application** > **Provisioning** and select **Authorize**.\\\\n \\\\n+#### How to set up client credentials\\\\n 1. Sign in to the [Microsoft Entra admin center](https://entra.microsoft.com) as at least an [Application Administrator](~/identity/role-based-access-control/permissions-reference.md#application-administrator).\\\\n 1. Browse to **Entra ID** > **Enterprise apps**.\\\\n 1. Select your application and go to **Provisioning**.\\\\n-1. Select **Authorize**.\\\\n-\\\\n-   1. Users are redirected to the Authorization URL (sign in page for the third party app).\\\\n-\\\\n-   1. Admin provides credentials to the third party application. \\\\n-\\\\n-   1. The third party app redirects user back and provides the grant code \\\\n-\\\\n-   1. The Provisioning Service calls the token URL and provides the grant code. The third party application responds with the access token, refresh token, and expiry date\\\\n-\\\\n-1. When the provisioning cycle begins, the service checks if the current access token is valid and exchanges it for a new token if needed. The access token is provided in each request made to the app and the validity of the request is checked before each request.\\\\n-\\\\n-> [!NOTE]\\\\n-> While it's not possible to set up OAuth on the non-gallery applications, you can manually generate an access token from your authorization server and input it as the secret token to a non-gallery application. This allows you to verify compatibility of your SCIM server with the Microsoft Entra provisioning service before onboarding to the app gallery, which does support the OAuth code grant.  \\\\n-\\\\n-**Long-lived OAuth bearer tokens:** If your application doesn't support the OAuth authorization code grant flow, instead generate a long lived OAuth bearer token that an administrator can use to set up the provisioning integration. The token should be perpetual, or else the provisioning job is [quarantined](application-provisioning-quarantine-status.md) when the token expires.\\\\n+1. For **Admin Credentials > Authentication Method**, select **OAuth2 Client Credentials Grant**.\\\\n+1. Enter your information for the remaining fields:\\\\n+    - **Tenant URL**\\\\n+    - **Token Endpoint**\\\\n+    - **Client Identifier**\\\\n+    - **Client Secret**.\\\\n+1. Click **Test Connection**.\\\\n \\\\n For more authentication and authorization methods, let us know on [UserVoice](https://aka.ms/appprovisioningfeaturerequest).\\\\n \\\"\\r\\n  }\\r\\n]. Please summarise it in a few sentences, using UK grammar and ensure the response is formatted for markdown. Do not start the response with here is summary.\"}",
    "Response": "This commit primarily addresses documentation updates for Microsoft Entra ID.\n\nKey changes include:\n\n*   The minimum .NET version required for Microsoft Entra private network connectors has been updated from v4.7.1+ to v4.7.2+.\n*   A port correction has been made in the documentation for using Azure SQL Service Endpoints with Global Secure Access, changing the port from `1443` to `1433`.\n*   Significant updates have been made to the documentation regarding SCIM provisioning, particularly concerning authentication and authorisation methods. The OAuth Authorization Code Grant is being deprecated in favour of the OAuth 2.0 Client Credentials Grant for new connectors, and guidance on setting up the client credentials flow has been enhanced.",
    "Model": "google:gemini-2.5-flash-lite",
    "Provider": "google",
    "ModelName": "gemini-2.5-flash-lite",
    "Timestamp": "2025-09-19T19:01:45.7553115+00:00"
  },
  "files": [
    {
      "filename": "docs/global-secure-access/how-to-configure-connectors.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1
    },
    {
      "filename": "docs/global-secure-access/how-to-use-with-azure-sql-service-endpoint.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1
    },
    {
      "filename": "docs/identity/app-provisioning/use-scim-to-provision-users-and-groups.md",
      "status": "modified",
      "additions": 24,
      "deletions": 39
    }
  ]
}